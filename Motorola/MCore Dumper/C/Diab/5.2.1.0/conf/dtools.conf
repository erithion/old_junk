# Generic configuration file for the Diab Data compiler tools
# Avoid altering this file. Set defaults and specific options in
# either default.conf (supplied with the compilers) or in
# user.conf (not supplied)

DCC="$DEFAULTLIB"

# To customize the compiler tools, set the following variables (with examples)
# in default.conf or user.conf

DCTOA=					# C compiler 	(.../ctoa)
DDTOA=					# C++ compiler 	(.../dtoa)
DETOA=					# C++ compiler 	(.../etoa)
DFTOA=					# f77 compiler 	(.../ftoa)
DJTOA=					# j compiler 	(.../jtoa)
DCD=					# .cd file	(.../$DTARGET.cd)
DOPT1=					# optimizer 1	(.../reorder??)
DOPT2=					# optimizer 2	()
DOPT3=					# optimizer 3	(always reorder)
DAS=					# assembler	(.../das)
DASOLD=					# old assembler	(.../dasold)
ACFLAGS=				# as flags D-CC (-T,.../$DTARGET.ad,-X)
ASFLAGS=				# as flags D-AS	(-T .../$DTARGET.ad)
DAD=					# .ad file	(.../$DTARGET.ad)
DPRELINK=                               # C++ prelinker (.../prelink)
DLD=					# linker	(.../dld)
DCRT=NO					# crt0 files	(.../crt0.o)
DMCRT=					# mcrt0 files	(.../mcrt0.o)
DLIBC=NO				# libc(s)	(-lc)
DLIBS=					# lib path(s)	(.../$DTARGET)
DLIBP=					# libp path	(-L.../libp)
DINC1=					# include files	(-YI,.../include)
DINC2=					# include files	(-I.../include)
DINC3=					# include files	(-I.../include/special)
DINC4=					# include files	(-I.../include/special+)
XFLAGS=					# xtra flags to be set
XDFLAGS=				# xtra flags to be set
LFLAGS=					# linker flags
LFLAGS2=				# linker flags
UFLAGS1=				# flags set in user.conf
UFLAGS2=				# flags set in user.conf
UAFLAGS1=				# flags set in user.conf
UAFLAGS2=				# flags set in user.conf
DEFAULTFLAGS=				# set any default -X flags
AFLAGS=					# extra flags to assembler
#DCATALOG=				# message catalog file
DCXXOLD=NO				# do not use old C++ compiler by default
DCXXABR=NO				# do not use abridged headers by default

include default.conf			# default targets, etc.
include user.conf			# Check user specific options

BIN="$DCC$/$DHOST$/bin"

switch($DOBJECT)
case ?:			# misc special
	break
case NO_OBJECT:		# null object for dcc -VV, dcc -?
	break
case *:
	print "dtools.conf: Unknown value of DOBJECT ($DOBJECT)."
	print "Use the -t option"
	error
endsw

if ($DENVIRON==rtasim) DENVIRON="windiss"
DENVDIR="$DENVIRON"
if ($DENVIRON==sim*) DENVDIR="cross"
if ($DENVIRON==simple) DENVDIR="simple"

switch($DFP)
case hard:
case H:
	XFLAGS="$XFLAGS -D__hardfp"
	DFP=H
	break
case V:
	XFLAGS="$XFLAGS -D__hardfp"
	DFP=V
	break
case soft:
case S:
	XFLAGS="$XFLAGS -D__softfp"
	DFP=S
	break
case F:
	XFLAGS="$XFLAGS -D__softfp -Xsingle-fp"
	break
case G:
	XFLAGS="$XFLAGS -D__softfp -D__SINGLE_ONLY -Xsingle-fp -Xno-double"
	break
case none:
case N:
	XFLAGS="$XFLAGS -D__nofp"
	DFP=N
	break
case NO_DFP:		# null floating point mode for dcc -VV, dcc -?
	break
case *:
	print "dtools.conf: Unknown value of DFP ($DFP)."
	print "Use the -t option"
	error
endsw

DTFP=		# for floating point checking

switch($DTARGET)
case ARM*:
	TARGETFAMILY=11
	include ARM.conf
	break;	
case MC6*:
case MCF51*:
case CPU*:
	TARGETFAMILY=1
	include MC68K.conf
	break;
case MCF*:
case ACE*:
	TARGETFAMILY=5
	include ACE.conf
	break;
case POWER:
case MPC55*:
case PPC*:
	TARGETFAMILY=2
	include PPC.conf
	break
case MCORE*:
case RCE*:
	TARGETFAMILY=4
	include MCORE.conf
	break
case M32R*:
	TARGETFAMILY=6
	include M32R.conf
	break
case MIPS16*:
	TARGETFAMILY=9
	include MIPS16.conf
	break
case MIPS*:
case RM9K*:
case R[345]*:
case TX49*:
	TARGETFAMILY=3
	include MIPS.conf
	break
case NEC*:
case V8*:
	TARGETFAMILY=7
	include NEC.conf
	break
case SH*:
	TARGETFAMILY=10
	include SH.conf
	break
case SC*:
	TARGETFAMILY=14
	include SC.conf
	break
case SPARC*:
	TARGETFAMILY=8
	include SPARC.conf
	break
case X86*:
case PENTIUM*:
	TARGETFAMILY=13
	include X86.conf
	break
case NO_TARGET:		# null target for dcc -VV, dcc -?
	break
case *:
	print "dtools.conf: Unknown value of DTARGET ($DTARGET)."
	print " Use the -t option"
	error
endsw
XFLAGS="$XFLAGS -Xtarget-family=$TARGETFAMILY"

switch($DFP$DTFP)
case HS:
	print "dtools.conf: Processor does not support Hardware Floating Point"
	error
	break
endsw

if (!$DLIBLF) DLIBLF="$DLIB"
if (!$DLIBLG) DLIBLG="$DLIB"
# set variables depending on environment

if (!$ACFLAGS) ACFLAGS=-X
if (!$ASFLAGS) ASFLAGS="$AFLAGS"
if (!$DINC1) if (!$DINC2) if ($DENVDIR) DINC2="-I$DCC$/include$/$DENVDIR"
if (!$DINC1) DINC1="-YI,$DCC$/include"

# Shared library related
switch($DSHARED)
case shared:
	DLINKFILE=libso.dld
	XFLAGS="$XFLAGS -Xpic"
	break
case dynamic:
	XFLAGS="$XFLAGS -Xpic"
	break	
case *:
	break
endsw

switch($DENVIRON)
case ?*:
	include $DENVIRON.conf
	break
case no_environ:		# null environ for dcc -VV, dcc -?
	break
case *:
	print "dtools.conf: DENVIRON not set."
	print "Use dctrl -t to build the default.conf file."
	error
endsw

if (!$LLIB) LLIB="$DLIBLG"			# directory of crt0.o, libc.a ...
XFLAGS="$XFLAGS -D_DIAB_TOOL"

# If unix, set macros:
if ($DUNIX==YES) XDFLAGS="$XDFLAGS -Dunix"
else if (!$DLINKFILE) if(!$-Wm) if(!$-r*) DLINKFILE=default.dld

# Set DCXXOLD so we can choose actual C++ compiler
# A -Xc++-old switch on command line overrides the DCXXOLD=NO
# No need to test for DCXXOLD=YES from user.conf (redundant)
if ($DCXXOLD==NO)  if($-Xc++-old) DCXXOLD="YES"
if ($DCXXOLD==YES) XFLAGS="$XFLAGS -Xc++-old"

# Set DXXABR so that the correct header files can be used
# Using -Xc++-abr on command line overrides the DXXABR=NO
# As before, no need to test for DXXABR=YES from user.conf
if ($DCXXABR==NO)  if($-Xc++-abr) DCXXABR="YES"
if($-Xc++-std) DCXXABR="NO" 
if ($DCXXABR==YES) XFLAGS="$XFLAGS -Xc++-abr -Xexceptions-off -Xrtti-off -D__CONFIGURE_EMBEDDED=1 -D__CONFIGURE_EXCEPTIONS=0"
if ($DCXXABR==NO) XFLAGS="$XFLAGS -Xc++-std -D__CONFIGURE_EMBEDDED=0 -D__CONFIGURE_EXCEPTIONS=1"

# If not customized, use the following settings
if (!$DCTOA) DCTOA="$DCC$/$DHOST$/lib$/ctoa"
if (!$DDTOA) DDTOA="$DCC$/$DHOST$/lib$/dtoa"
if (!$DETOA) DETOA="$DCC$/$DHOST$/lib$/etoa"
if (!$DFTOA) DFTOA="$DCC$/$DHOST$/lib$/ftoa"
if (!$DJTOA) DJTOA="$DCC$/$DHOST$/lib$/jtoa"
if (!$DCD)   DCD="$DLIB$/$DFORMAT.cd"
if (!$DOPT1) DOPT1="$O1"
if (!$DOPT2) DOPT2="$O2"
if (!$DOPT3) DOPT3="$O3"
if (!$DAS)   DAS="$BIN$/das"
if (!$DASOLD) DASOLD="$BIN$/dasold"
if (!$DAD)    DAD="$DLIB$/$DFORMAT.ad"
if (!$DPRELINK) DPRELINK="$DCC$/$DHOST$/lib$/prelink"
if (!$DLD)     DLD="$BIN$/dld"
if ($DCRT==NO) DCRT0="-l:crt0.o"
if (!$DMCRT)   DMCRT="-l:mcrt0.o"
if ($DLIBXC==YES) if ($DLIBC==NO) DLIBC="-lxc,-lc" XFLAGS="$XFLAGS -L$DLIBLF -L$DLIBLG"
if ($DLIBC==NO) DLIBC="-lc"
if (!$DLIBP) DLIBP="-L$LLIB$/libp"
if ($DLINKFILE) DLINKFILE="-Wm$DCC$/conf$/$DLINKFILE"
if (!$DCATALOG) DCATALOG="$DCC$/$DHOST$/lib$/cderror.cat"
# DCXXOLD=YES will invoke the old C++ compiler, everything else the new compiler
if ($DCXXOLD=="YES") DDTOA="$DDTOA" 
else                 DDTOA="$DETOA" 
if ($DCXXOLD==YES)   DINC3="-I$DCC$/include$/cppold"
else if ($DCXXABR==NO)		     DINC3="-I$DCC$/include$/cpp/std"
else DINC3="-I$DCC$/include$/cpp/abr"
if ($DCXXOLD==NO)   DINC4="-I$DCC$/include$/cpp"
if ($-Xminjlib) JLIB="libjmin.a"
else if ($-Xgc-incremental) JLIB="libji.a"
else JLIB="libj.a"
if ($DENVDIR) JINC="$JINC -I$DLIBLFJ/$DENVDIR/$JLIB"
JINC="$JINC -I$DLIBLFJ/$JLIB"
if ($DTOOL!=dj) JINC=
else XFLAGS="$XFLAGS -Wl,-Xremove-unused-sections"

switch($DTOOL)
case df77:
	if ($DENVIRON==natbin) XFLAGS="$XFLAGS -L$DLIBLF -L$DLIBLG" # use our own df77lib.a
	XDFLAGS=			# do not define macros w/o leading '_'
	# fall through
case dj:
case dcc:
case dplus:
	-W:c:"$DCTOA"			# actual C compiler
	-W:c++:"$DDTOA"			# actual C++ compiler
	-W:f77:"$DFTOA"			# actual f77 compiler
	-W:j:"$DJTOA"			# actual j compiler
	-M"$DCD"			# compiler target description
	-Z"$DCATALOG"			# compiler catalog file
	-W1"$DOPT1"			# .s optimizer/filter phase 1
	-W2"$DOPT2"			# .s optimizer/filter phase 2
	-W3"$DOPT3"			# .s optimizer/filter phase 3
	-Wa"$DAS"			# assembler
	if ($ACFLAGS) -Wa,"$ACFLAGS"	# assembler target description
	-W:prelink:"$DPRELINK"		# prelinker
	-Wl"$DLD"			# linker
	"$DLIBS"			# location of -l libraries
	"-Ws$DCRT0"			# startup module
	"-WS$DMCRT"			# startup module (profiling)
	-Wc"$DLIBC"			# libc command
	"$DINC1"			# location of default include files
	-WP"$DLIBP"			# location of libc when profiling
	-Wi				# compiler library
	"$DLINKFILE"			# map file
	$XFLAGS				# compiler flags
	$XDFLAGS			# non-ANSI defines
	$DEFAULTFLAGS			# default -X flags
	$UFLAGS1			# from user.conf
	$DFLAGS				# compiler flags set by user
	$*				# user arguments
	$JINC				# from user.conf
	$UFLAGS2			# from user.conf
	"$DINC3"			# location of STL include files
	"$DINC4"			# location of extra STL include files
	"$DINC2"			# location of extra include files
	break
case das:
	-T"$DAD"			# assembler descriptor file
	$UAFLAGS1			# from user.conf
	$ASFLAGS
	$UAFLAGS2			# from user.conf
	break
case dld:
	$ULFLAGS1			# from user.conf
	$LFLAGS
	"$DLIBS"			# location of -l libraries
	$ULFLAGS3
	$*				# user arguments
	$LFLAGS2			# extra linker flags
	$ULFLAGS2			# from user.conf
	break
endsw
